# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
#from cerbero.tools.libtool import LibtoolLibrary

import platform
class Recipe(recipe.Recipe):
    name = 'openwebrtc-lite'
    version = '0.3.1'

    remotes = {'origin': 'https://github.com/Mingyiz/openwebrtc-lite.git'}
    commit = '0.3.1'

    btype = BuildType.AUTOCMAKE
    

    deps = ['openwebrtc-gst-plugins','libusrsctp']
    
    if 'Linux' == platform.system():
        deps.append('pulseaudio')
    #patches = ['openwebrtc/0001-AutoCMake-adaptation.patch',               
    #           'openwebrtc/0002-Windows-platform-support.patch',
    #           'openwebrtc/0001-pulseaudio-support-for-openwebrtc-test.patch',
	#		   'openwebrtc/0001-add-fix.patch']
    #
    files_libs = ['libopenwebrtc_gst-lite','libopenwebrtc-lite-0.3']
    files_devel = ['include/owr', 'lib/pkgconfig/openwebrtc-lite-0.3.pc',
                   'lib/pkgconfig/openwebrtc-gst-lite-0.3.pc']

#    def configure(self):
#        if self.config.target_platform == Platform.LINUX:
#             os.environ['CFLAGS'] += ' -fPIC '
#        super(recipe.Recipe, self).configure()
#    def prepare(self):
#        if self.config.target_platform == Platform.WINDOWS:
#            self.make = 'make -f win32/Makefile.gcc PREFIX=%s- ' % self.config.host
#            self.make_install = 'make install -f win32/Makefile.gcc '\
#                                'INCLUDE_PATH=%(prefix)s/include '\
#                                'LIBRARY_PATH=%(prefix)s/lib ' \
#                                'BINARY_PATH=%(prefix)s/bin ' % {'prefix':self.config.prefix}
#            self._remove_steps ([BuildSteps.CONFIGURE])
#        elif self.config.target_platform == Platform.ANDROID:
#            if self.config.target_arch == Architecture.X86:
#                self.configure_options += " --uname=i686-linux-android "
#            if self.config.target_arch == Architecture.X86_64:
#                self.configure_options += " --uname=x86_64-linux-android "
#            else:
#                self.configure_options += " --uname=arm-linux-androideabi "
#        elif self.config.target_platform == Platform.LINUX:
#            if self.config.cross_compiling() and self.config.host:
#                self.configure_options += " --uname=" + self.config.host
#
#    def post_install(self):
#        libtool_la = LibtoolLibrary('z', 1, 2, 8, self.config.libdir,
#                self.config.target_platform)
#        libtool_la.save()
#        # FIXME This is to workaround a build issue trying to ld to libz.so
#        if self.config.target_platform == Platform.IOS:
#            try:
#                os.symlink(os.path.join (self.config.prefix, 'lib', 'libz.dylib'),
#                        os.path.join (self.config.prefix, 'lib', 'libz.so'))
#            except OSError:
#                pass
#
