# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
#from cerbero.tools.libtool import LibtoolLibrary


class Recipe(recipe.Recipe):
    name = 'libevent'
    version = '2.1.8'
    stype = SourceType.TARBALL
    btype = BuildType.AUTOCMAKE
    patches = ['libevent/0001-AutoCMake-model.patch',
    	       'libevent/0002-openssl-find-from-pc.patch']

    #if os.getenv('MSYSTEM'):
    #    btype = BuildType.AUTOCMAKE
    #    patches = ['libevent/0001-AutoCMake-model.patch',
	#               'libevent/0002-openssl-find-from-pc.patch']
    #else:
    #    btype = BuildType.CMAKE
	tarball_dirname = 'libevent-release-2.1.8-stable'
    url = 'https://github.com/libevent/libevent/archive/release-2.1.8-stable.tar.gz'
    licenses = [License.BSD_like]
    
    #add_host_build_target = False
    #can_use_configure_cache = False
    #configure_tpl = "./configure --prefix %(prefix)s "\
    #                "--libdir %(libdir)s %(options)s"
    #
    files_libs = ['libevent','libevent_core','libevent_extra']
    files_devel = ['include/libevent', 'lib/pkgconfig/libevent.pc','lib/pkgconfig/libevent_core.pc','lib/pkgconfig/libevent_extra.pc']

    def prepare(self):

        self.configure_options += " -DEVENT__BUILD_SHARED_LIBRARIES=OFF "
        self.configure_options += " -DEVENT__DISABLE_TESTS=ON "


#    def prepare(self):
#        pass
#        return
#        self.configure_options += " -DEVENT__BUILD_SHARED_LIBRARIES=OFF "
#        self.configure_options += " -DOPENSSL_ROOT_DIR=%s "%self.config.prefix
#        self.configure_options += " -DOPENSSL_LIBRARIES=%s/lib "%self.config.prefix
#	
#        if self.config.target_platform == Platform.WINDOWS:
#            self.make = 'make -f win32/Makefile.gcc PREFIX=%s- ' % self.config.host
#            self.make_install = 'make install -f win32/Makefile.gcc '\
#                                'INCLUDE_PATH=%(prefix)s/include '\
#                                'LIBRARY_PATH=%(prefix)s/lib ' \
#                                'BINARY_PATH=%(prefix)s/bin ' % {'prefix':self.config.prefix}
#            self._remove_steps ([BuildSteps.CONFIGURE])
#        elif self.config.target_platform == Platform.ANDROID:
#            if self.config.target_arch == Architecture.X86:
#                self.configure_options += " --uname=i686-linux-android "
#            if self.config.target_arch == Architecture.X86_64:
#                self.configure_options += " --uname=x86_64-linux-android "
#            else:
#                self.configure_options += " --uname=arm-linux-androideabi "
#        elif self.config.target_platform == Platform.LINUX:
#            if self.config.cross_compiling() and self.config.host:
#                self.configure_options += " --uname=" + self.config.host
#
#    def post_install(self):
#        libtool_la = LibtoolLibrary('z', 1, 2, 8, self.config.libdir,
#                self.config.target_platform)
#        libtool_la.save()
#        # FIXME This is to workaround a build issue trying to ld to libz.so
#        if self.config.target_platform == Platform.IOS:
#            try:
#                os.symlink(os.path.join (self.config.prefix, 'lib', 'libz.dylib'),
#                        os.path.join (self.config.prefix, 'lib', 'libz.so'))
#            except OSError:
#                pass
#
