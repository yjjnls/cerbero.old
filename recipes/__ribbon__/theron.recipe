# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
#from cerbero.tools.libtool import LibtoolLibrary
from cerbero.utils import shell

PC_TMPL = """
prefix=%(prefix)s
exec_prefix=${prefix}/bin
libdir=${prefix}/lib
sharedlibdir=${prefix}/lib
includedir=${prefix}/include

Name: theron
Description: a lightweight C++ concurrency library based on the Actor Model
Version: %(version)s
Requires: 

Requires:
Libs: -L${libdir} -L${sharedlibdir} -ltheron
Cflags: -I${includedir} 
"""


class Recipe(recipe.Recipe):
    name = 'theron'
    version = '6.00.02'
    stype = SourceType.TARBALL
    if os.getenv('MSYSTEM'):
        btype = BuildType.AUTOCMAKE
    else:
        btype = BuildType.MAKEFILE

    url = 'http://www.ashtonmason.net/wp-content/uploads/2017/01/Theron-6.00.02.zip'
    licenses = [License.BSD_like]
    #add_host_build_target = False
    #can_use_configure_cache = False
    #configure_tpl = "./configure --prefix %(prefix)s "\
    #                "--libdir %(libdir)s %(options)s"
    patches = [
        'theron/0001-add-cmake-build.patch',
        'theron/0001-makefile-shared.patch'
    ]
    #
    files_libs = ['libtheron']
    files_devel = ['include/Theron', 'lib/pkgconfig/theron.pc']

    def prepare(self):
        if self.config.target_platform == Platform.LINUX:
            self.make = 'make library mode=%s shared=on' % (
                self.config.build_type.lower())

    def configure(self):
        if self.config.target_platform == Platform.WINDOWS:
            super(recipe.Recipe, self).configure()
        elif self.config.target_platform == Platform.LINUX:
            pass

    def install(self):
        if self.config.target_platform == Platform.WINDOWS:
            super(recipe.Recipe, self).install()
        elif self.config.target_platform == Platform.LINUX:
            shell.copy_dir('%s/Include/Theron' % (self.make_dir),
                           '%s/include/%s' %
                           (self.config.install_dir, Recipe.name))
            shell.copy_dir('%s/Lib' % (self.make_dir),
                           '%s/lib' % (self.config.install_dir))
            d = "{0}/lib/pkgconfig".format(self.config.install_dir)
            if not os.path.exists(d):
                os.makedirs(d)

            filename = "{0}/lib/pkgconfig/theron.pc".format(
                self.config.install_dir)
            f = open(filename, 'w')
            f.write(PC_TMPL % {
                'version': self.version,
                'prefix': self.config.install_dir
            })
            f.close()


#    def prepare(self):
#        if self.config.target_platform == Platform.WINDOWS:
#            self.make = 'make -f win32/Makefile.gcc PREFIX=%s- ' % self.config.host
#            self.make_install = 'make install -f win32/Makefile.gcc '\
#                                'INCLUDE_PATH=%(prefix)s/include '\
#                                'LIBRARY_PATH=%(prefix)s/lib ' \
#                                'BINARY_PATH=%(prefix)s/bin ' % {'prefix':self.config.prefix}
#            self._remove_steps ([BuildSteps.CONFIGURE])
#        elif self.config.target_platform == Platform.ANDROID:
#            if self.config.target_arch == Architecture.X86:
#                self.configure_options += " --uname=i686-linux-android "
#            if self.config.target_arch == Architecture.X86_64:
#                self.configure_options += " --uname=x86_64-linux-android "
#            else:
#                self.configure_options += " --uname=arm-linux-androideabi "
#        elif self.config.target_platform == Platform.LINUX:
#            if self.config.cross_compiling() and self.config.host:
#                self.configure_options += " --uname=" + self.config.host
#
#    def post_install(self):
#        libtool_la = LibtoolLibrary('z', 1, 2, 8, self.config.libdir,
#                self.config.target_platform)
#        libtool_la.save()
#        # FIXME This is to workaround a build issue trying to ld to libz.so
#        if self.config.target_platform == Platform.IOS:
#            try:
#                os.symlink(os.path.join (self.config.prefix, 'lib', 'libz.dylib'),
#                        os.path.join (self.config.prefix, 'lib', 'libz.so'))
#            except OSError:
#                pass
#
