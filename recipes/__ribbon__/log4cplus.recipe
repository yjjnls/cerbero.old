# -*- Mode: Python -*- vi:si:et:sw=4:sts=4:ts=4:syntax=python
#from cerbero.tools.libtool import LibtoolLibrary


class Recipe(recipe.Recipe):
    name = 'log4cplus'
    version = '1.2.1-rc1'
    stype = SourceType.TARBALL
    if os.getenv('MSYSTEM'):
        btype = BuildType.AUTOCMAKE
    else:
        btype = BuildType.CMAKE
	tarball_dirname = 'log4cplus-REL_1_2_1-RC1'
    url = 'https://github.com/log4cplus/log4cplus/archive/REL_1_2_1-RC1.tar.gz'
    #licenses = [License.BSD_like]
    #add_host_build_target = False
    #can_use_configure_cache = False
    #configure_tpl = "./configure --prefix %(prefix)s "\
    #                "--libdir %(libdir)s %(options)s"
    patches = ['log4cplus/0001-AutoCMake-adaptation.patch',
                'log4cplus/0002-Build-static-lib-only.patch']
    #
    files_libs = ['liblog4cplus']
    files_devel = ['include/log4cplus',  'lib/pkgconfig/log4cplus.pc']


    def prepare(self):
		if self.config.target_platform == Platform.LINUX:
            self.config_sh = './configure'
            self.configure_tpl = "%(config-sh)s CXXFLAGS=\"-std=c++0x\" --enable-static=yes"
            
        self.configure_options += " -DEVENT__BUILD_SHARED_LIBRARIES=OFF "
        self.configure_options += " -DLOG4CPLUS_ENABLE_DECORATED_LIBRARY_NAME=OFF "
    def post_install(self):
        import shutil
        if self.config.target_platform == Platform.LINUX:
            src = os.path.join(self.make_dir,'include/log4cplus')
            dst = os.path.join(self.config.prefix,'include/log4cplus')
            if not os.path.exists(dst ):
                os.makedirs( dst )
            shell.copy_dir( src,dst )

            src = os.path.join(self.make_dir,'.libs/liblog4cplus.a')
            d = os.path.join(self.config.prefix,'lib')
            if not os.path.exists(d ):
                os.makedirs( d )
            dst = os.path.join(d,'liblog4cplus.a')
            shutil.copy(src,dst)

            src = os.path.join(self.make_dir,'log4cplus.pc')
            d = os.path.join(self.config.prefix,'lib/pkgconfig')
            if not os.path.exists(d ):
                os.makedirs( d )
            dst = os.path.join(d,'log4cplus.pc')
            shutil.copy(src,dst)
    # def install(self):
    #     if self.config.target_platform == Platform.LINUX:
        
#	
#        if self.config.target_platform == Platform.WINDOWS:
#            self.make = 'make -f win32/Makefile.gcc PREFIX=%s- ' % self.config.host
#            self.make_install = 'make install -f win32/Makefile.gcc '\
#                                'INCLUDE_PATH=%(prefix)s/include '\
#                                'LIBRARY_PATH=%(prefix)s/lib ' \
#                                'BINARY_PATH=%(prefix)s/bin ' % {'prefix':self.config.prefix}
#            self._remove_steps ([BuildSteps.CONFIGURE])
#        elif self.config.target_platform == Platform.ANDROID:
#            if self.config.target_arch == Architecture.X86:
#                self.configure_options += " --uname=i686-linux-android "
#            if self.config.target_arch == Architecture.X86_64:
#                self.configure_options += " --uname=x86_64-linux-android "
#            else:
#                self.configure_options += " --uname=arm-linux-androideabi "
#        elif self.config.target_platform == Platform.LINUX:
#            if self.config.cross_compiling() and self.config.host:
#                self.configure_options += " --uname=" + self.config.host
#
#    def post_install(self):
#        libtool_la = LibtoolLibrary('z', 1, 2, 8, self.config.libdir,
#                self.config.target_platform)
#        libtool_la.save()
#        # FIXME This is to workaround a build issue trying to ld to libz.so
#        if self.config.target_platform == Platform.IOS:
#            try:
#                os.symlink(os.path.join (self.config.prefix, 'lib', 'libz.dylib'),
#                        os.path.join (self.config.prefix, 'lib', 'libz.so'))
#            except OSError:
#                pass
#
