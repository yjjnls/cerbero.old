From b09cd11cc3339fe89fbb944e253e6bba70f7b5fd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Sebastian=20Dr=C3=B6ge?= <sebastian@centricular.com>
Date: Fri, 7 Mar 2014 12:50:24 +0100
Subject: [PATCH 1/2] Add support for static modules

Other than the previous approach this now doesn't go via
dlopen() and stuff but just registers the module directly.

Also does not require any GLib changes.
---
 configure.ac                    | 20 ++++++++++++++++++++
 glib-networking.mk              |  5 ++++-
 tls/gnutls/gnutls-module.c      | 12 +++++++++++-
 tls/gnutls/gtlsbackend-gnutls.c | 27 ++++++++++++++++++++++-----
 tls/gnutls/gtlsbackend-gnutls.h |  7 ++++++-
 5 files changed, 63 insertions(+), 8 deletions(-)

diff --git a/configure.ac b/configure.ac
index 84ceb68..a5521a0 100644
--- a/configure.ac
+++ b/configure.ac
@@ -233,6 +233,26 @@ if test "$GCC" = "yes" -a "$set_more_warnings" != "no"; then
 		-Werror=declaration-after-statement"
 fi
 
+dnl ****************************************************
+dnl *** Check for GIO static modules                 ***
+dnl ****************************************************
+AC_MSG_CHECKING([whether to build static modules or not])
+AC_ARG_ENABLE(
+  static-modules,
+  AC_HELP_STRING(
+    [--enable-static-modules],
+    [build static modules @<:@default=no@:>@]),
+  [AS_CASE(
+    [$enableval], [no], [], [yes], [],
+    [AC_MSG_ERROR([bad value "$enableval" for --enable-static-modules])])],
+  [enable_static_modules=no])
+AC_MSG_RESULT([$enable_static_modules])
+if test "x$enable_static_modules" = xyes; then
+  AC_DEFINE(G_IO_MODULE_BUILD_STATIC, 1,
+    [Define if static modules should be built])
+fi
+AM_CONDITIONAL(G_IO_MODULE_BUILD_STATIC, [test "x$enable_static_modules" = "xyes"])
+
 dnl *****************************
 dnl *** done                  ***
 dnl *****************************
diff --git a/glib-networking.mk b/glib-networking.mk
index 29b6a6a..5231766 100644
--- a/glib-networking.mk
+++ b/glib-networking.mk
@@ -1,6 +1,9 @@
 ### glib-networking declarations
 
-module_flags = -export_dynamic -avoid-version -module -no-undefined -export-symbols-regex '^g_io_module_(load|unload|query)'
+module_flags = -export_dynamic -avoid-version -module -no-undefined
+if !G_IO_MODULE_BUILD_STATIC
+module_flags += -export-symbols-regex '^g_io_module_(load|unload|query)'
+endif
 
 giomoduledir = $(GIO_MODULE_DIR)
 
diff --git a/tls/gnutls/gnutls-module.c b/tls/gnutls/gnutls-module.c
index a725f9b..8da3c2b 100644
--- a/tls/gnutls/gnutls-module.c
+++ b/tls/gnutls/gnutls-module.c
@@ -24,7 +24,16 @@
 #include "gtlsbackend-gnutls.h"
 #include "gtlsbackend-gnutls-pkcs11.h"
 
-
+#ifdef G_IO_MODULE_BUILD_STATIC
+void
+g_io_module_gnutls_register (void)
+{
+  g_io_module_gnutls_load_static ();
+#ifdef HAVE_PKCS11
+  g_io_module_gnutls_pkcs11_load_static ();
+#endif
+}
+#else
 void
 g_io_module_load (GIOModule *module)
 {
@@ -48,3 +57,4 @@ g_io_module_query (void)
   };
   return g_strdupv (eps);
 }
+#endif
diff --git a/tls/gnutls/gtlsbackend-gnutls.c b/tls/gnutls/gtlsbackend-gnutls.c
index 55ec1a5..277fff2 100644
--- a/tls/gnutls/gtlsbackend-gnutls.c
+++ b/tls/gnutls/gtlsbackend-gnutls.c
@@ -39,10 +39,22 @@ struct _GTlsBackendGnutlsPrivate
 
 static void g_tls_backend_gnutls_interface_init (GTlsBackendInterface *iface);
 
+#ifdef G_IO_MODULE_BUILD_STATIC
+G_DEFINE_TYPE_EXTENDED (GTlsBackendGnutls, g_tls_backend_gnutls, G_TYPE_OBJECT, 0,
+			G_IMPLEMENT_INTERFACE (G_TYPE_TLS_BACKEND,
+							       g_tls_backend_gnutls_interface_init);)
+void _g_io_modules_ensure_extension_points_registered (void);
+#else
 G_DEFINE_DYNAMIC_TYPE_EXTENDED (GTlsBackendGnutls, g_tls_backend_gnutls, G_TYPE_OBJECT, 0,
 				G_IMPLEMENT_INTERFACE_DYNAMIC (G_TYPE_TLS_BACKEND,
 							       g_tls_backend_gnutls_interface_init);)
 
+static void
+g_tls_backend_gnutls_class_finalize (GTlsBackendGnutlsClass *backend_class)
+{
+}
+#endif
+
 #ifdef GTLS_GNUTLS_DEBUG
 static void
 gtls_log_func (int level, const char *msg)
@@ -61,8 +73,11 @@ gtls_gnutls_init (gpointer data)
   gnutls_global_set_log_level (9);
 #endif
 
+#ifndef G_IO_MODULE_BUILD_STATIC
   /* Leak the module to keep it from being unloaded. */
   g_type_plugin_use (g_type_get_plugin (G_TYPE_TLS_BACKEND_GNUTLS));
+#endif
+
   return NULL;
 }
 
@@ -116,11 +131,6 @@ g_tls_backend_gnutls_class_init (GTlsBackendGnutlsClass *backend_class)
   g_type_class_add_private (backend_class, sizeof (GTlsBackendGnutlsPrivate));
 }
 
-static void
-g_tls_backend_gnutls_class_finalize (GTlsBackendGnutlsClass *backend_class)
-{
-}
-
 static GTlsDatabase*
 g_tls_backend_gnutls_get_default_database (GTlsBackend *backend)
 {
@@ -303,10 +313,17 @@ g_tls_backend_gnutls_lookup_session (unsigned int             type,
   return session_data;
 }
 
+#ifdef G_IO_MODULE_BUILD_STATIC
+void
+g_io_module_gnutls_load_static (void)
+{
+  _g_io_modules_ensure_extension_points_registered ();
+#else
 void
 g_tls_backend_gnutls_register (GIOModule *module)
 {
   g_tls_backend_gnutls_register_type (G_TYPE_MODULE (module));
+#endif
   g_io_extension_point_implement (G_TLS_BACKEND_EXTENSION_POINT_NAME,
 				  g_tls_backend_gnutls_get_type(),
 				  "gnutls",
diff --git a/tls/gnutls/gtlsbackend-gnutls.h b/tls/gnutls/gtlsbackend-gnutls.h
index 22caa00..24e139b 100644
--- a/tls/gnutls/gtlsbackend-gnutls.h
+++ b/tls/gnutls/gtlsbackend-gnutls.h
@@ -44,7 +44,12 @@ struct _GTlsBackendGnutls
 };
 
 GType g_tls_backend_gnutls_get_type (void) G_GNUC_CONST;
-void  g_tls_backend_gnutls_register (GIOModule *module);
+
+#ifdef G_IO_MODULE_BUILD_STATIC
+void g_io_module_gnutls_load_static (void);
+#else
+void g_tls_backend_gnutls_register (GIOModule *module);
+#endif
 
 void    g_tls_backend_gnutls_store_session  (unsigned int             type,
 					     GBytes                  *session_id,
-- 
1.9.0

